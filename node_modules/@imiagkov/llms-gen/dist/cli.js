#!/usr/bin/env node
import { generateLlmsTxt } from "./index.js";
import { log } from "./utils.js";
import path from "path";
function getFlag(name) {
    const idx = process.argv.findIndex((a) => a === name || a.startsWith(name + "="));
    if (idx === -1)
        return undefined;
    const direct = process.argv[idx];
    if (direct.includes("="))
        return direct.split("=")[1];
    const next = process.argv[idx + 1];
    return next && !next.startsWith("-") ? next : "true";
}
async function main() {
    const rootUrl = process.argv[2];
    if (!rootUrl || rootUrl.startsWith("-")) {
        console.error("Usage: llms-gen <root-url> [--out ./out] [--max 500] [--ua 'MyBot/1.0'] [--concurrency 8] [--delay 100] [--playwright] [--ignore-robots-for-sitemap] [--log-robots] [--timeout 30000]");
        process.exit(1);
    }
    const outputDir = getFlag("--out") || process.cwd();
    const maxPages = Number(getFlag("--max") || 500);
    const userAgent = getFlag("--ua") || undefined;
    const concurrency = Number(getFlag("--concurrency") || 8);
    const delayMs = getFlag("--delay") ? Number(getFlag("--delay")) : undefined;
    const usePlaywright = getFlag("--playwright") === "true" || getFlag("--playwright") === "true";
    const ignoreRobotsForSitemap = getFlag("--ignore-robots-for-sitemap") === "true";
    const logRobots = getFlag("--log-robots") === "true";
    const scrapeTimeoutMs = getFlag("--timeout") ? Number(getFlag("--timeout")) : undefined;
    const logCrawler = getFlag("--log-crawler") === "true";
    try {
        const res = await generateLlmsTxt({
            rootUrl,
            outputDir: path.resolve(outputDir),
            maxPages,
            userAgent,
            concurrency,
            delayMs,
            usePlaywright,
            scrapeTimeoutMs,
            ignoreRobotsForSitemap,
            logRobots,
            logCrawler
        });
        log("âœ… llms.txt generated at:", res.shortPath);
    }
    catch (e) {
        console.error("Error:", e?.message || e);
        process.exit(2);
    }
}
main().catch((e) => {
    console.error("Unexpected error:", e?.message || e);
    process.exit(2);
});
