import crypto from "crypto";
import fs from "fs/promises";
import path from "path";
const CACHE_FILE = ".llms-monitor-cache.json";
async function loadCache(outputDir) {
    try {
        const data = await fs.readFile(path.join(outputDir, CACHE_FILE), "utf8");
        return JSON.parse(data);
    }
    catch {
        return {};
    }
}
async function saveCache(outputDir, cache) {
    await fs.writeFile(path.join(outputDir, CACHE_FILE), JSON.stringify(cache, null, 2), "utf8");
}
export function normalizeUrl(href, rootUrl) {
    try {
        const base = new URL(rootUrl);
        const url = new URL(href, base);
        // Normalize protocol + hostname
        const baseHost = base.hostname.replace(/^www\./, "");
        const urlHost = url.hostname.replace(/^www\./, "");
        if (baseHost !== urlHost)
            return null; // only same-site links allowed
        // Remove hash + normalize pathname
        url.hash = "";
        url.searchParams.sort(); // consistent ordering
        let pathname = url.pathname;
        if (pathname.endsWith("/") && pathname !== "/") {
            pathname = pathname.slice(0, -1);
        }
        url.pathname = pathname;
        return url.toString();
    }
    catch {
        return null;
    }
}
export async function hasWebsiteChanged(urls, outputDir, userAgent) {
    const cache = await loadCache(outputDir);
    let changed = false;
    for (const url of urls) {
        try {
            const res = await fetch(url, {
                method: "HEAD",
                headers: userAgent ? { "User-Agent": userAgent } : {},
            });
            const etag = res.headers.get("etag") || undefined;
            const lastModified = res.headers.get("last-modified") || undefined;
            let hash;
            if (!etag && !lastModified) {
                const body = await (await fetch(url)).text();
                hash = crypto.createHash("md5").update(body).digest("hex");
            }
            const prev = cache[url];
            if (!prev ||
                prev.etag !== etag ||
                prev.lastModified !== lastModified ||
                prev.hash !== hash) {
                cache[url] = { etag, lastModified, hash };
                changed = true;
            }
        }
        catch (err) {
            console.warn(`[monitor] Failed to check ${url}:`, err);
        }
    }
    if (changed) {
        await saveCache(outputDir, cache);
    }
    return changed;
}
export function getSitemapUrl(rootUrl) {
    try {
        return new URL("/sitemap.xml", rootUrl).toString();
    }
    catch {
        return new URL(rootUrl).toString();
    }
}
export const sleep = (ms) => new Promise((r) => setTimeout(r, ms));
export function log(...args) {
    // Minimal logging; consumers can wrap/replace
    console.log("[llms-gen]", ...args);
}
